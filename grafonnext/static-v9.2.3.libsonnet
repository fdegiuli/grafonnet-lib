// Generated with `make static-v9.2.3.libsonnet`
{
  dashboard+: {
    withAnnotations(value): { annotations: value },
    withAnnotationsMixin(value): { annotations+: value },
    annotations+: {
      withList(value): { annotations+: { list: if std.isArray(value) then value else [value] } },
      withListMixin(value): { annotations+: { list+: if std.isArray(value) then value else [value] } },
      list+: {
        withBuiltIn(value=0): { annotations+: { builtIn: value } },
        withDatasource(value): { annotations+: { datasource: value } },
        withDatasourceMixin(value): { annotations+: { datasource+: value } },
        datasource+: {
          withType(value): { annotations+: { datasource+: { type: value } } },
          withUid(value): { annotations+: { datasource+: { uid: value } } },
        },
        withEnable(value=true): { annotations+: { enable: value } },
        withHide(value=false): { annotations+: { hide: value } },
        withIconColor(value): { annotations+: { iconColor: value } },
        withName(value): { annotations+: { name: value } },
        withRawQuery(value): { annotations+: { rawQuery: value } },
        withShowIn(value=0): { annotations+: { showIn: value } },
        withTarget(value): { annotations+: { target: value } },
        withTargetMixin(value): { annotations+: { target+: value } },
        withType(value='dashboard'): { annotations+: { type: value } },
      },
    },
    withDescription(value): { description: value },
    withEditable(value=true): { editable: value },
    withFiscalYearStartMonth(value): { fiscalYearStartMonth: value },
    withGnetId(value): { gnetId: value },
    withGraphTooltip(value=0): { graphTooltip: value },
    withId(value): { id: value },
    withLinks(value): { links: if std.isArray(value) then value else [value] },
    withLinksMixin(value): { links+: if std.isArray(value) then value else [value] },
    links+: {
      withAsDropdown(value=false): { asDropdown: value },
      withIcon(value): { icon: value },
      withIncludeVars(value=false): { includeVars: value },
      withKeepTime(value=false): { keepTime: value },
      withTags(value): { tags: if std.isArray(value) then value else [value] },
      withTagsMixin(value): { tags+: if std.isArray(value) then value else [value] },
      withTargetBlank(value=false): { targetBlank: value },
      withTitle(value): { title: value },
      withTooltip(value): { tooltip: value },
      withType(value): { type: value },
      withUrl(value): { url: value },
    },
    withLiveNow(value=true): { liveNow: value },
    withPanels(value): { panels: if std.isArray(value) then value else [value] },
    withPanelsMixin(value): { panels+: if std.isArray(value) then value else [value] },
    panels+: {
      'dashboard.Panel'+: {
        withDatasource(value): { datasource: value },
        withDatasourceMixin(value): { datasource+: value },
        datasource+: {
          withType(value): { datasource+: { type: value } },
          withUid(value): { datasource+: { uid: value } },
        },
        withDescription(value): { description: value },
        withFieldConfig(value): { fieldConfig: value },
        withFieldConfigMixin(value): { fieldConfig+: value },
        fieldConfig+: {
          withDefaults(value): { fieldConfig+: { defaults: value } },
          withDefaultsMixin(value): { fieldConfig+: { defaults+: value } },
          defaults+: {
            withColor(value): { fieldConfig+: { defaults+: { color: value } } },
            withColorMixin(value): { fieldConfig+: { defaults+: { color+: value } } },
            color+: {
              withFixedColor(value): { fieldConfig+: { defaults+: { color+: { fixedColor: value } } } },
              withMode(value): { fieldConfig+: { defaults+: { color+: { mode: value } } } },
              withSeriesBy(value): { fieldConfig+: { defaults+: { color+: { seriesBy: value } } } },
            },
            withCustom(value): { fieldConfig+: { defaults+: { custom: value } } },
            withCustomMixin(value): { fieldConfig+: { defaults+: { custom+: value } } },
            withDecimals(value): { fieldConfig+: { defaults+: { decimals: value } } },
            withDescription(value): { fieldConfig+: { defaults+: { description: value } } },
            withDisplayName(value): { fieldConfig+: { defaults+: { displayName: value } } },
            withDisplayNameFromDS(value): { fieldConfig+: { defaults+: { displayNameFromDS: value } } },
            withFilterable(value=true): { fieldConfig+: { defaults+: { filterable: value } } },
            withLinks(value): { fieldConfig+: { defaults+: { links: if std.isArray(value) then value else [value] } } },
            withLinksMixin(value): { fieldConfig+: { defaults+: { links+: if std.isArray(value) then value else [value] } } },
            withMappings(value): { fieldConfig+: { defaults+: { mappings: if std.isArray(value) then value else [value] } } },
            withMappingsMixin(value): { fieldConfig+: { defaults+: { mappings+: if std.isArray(value) then value else [value] } } },
            withMax(value): { fieldConfig+: { defaults+: { max: value } } },
            withMin(value): { fieldConfig+: { defaults+: { min: value } } },
            withNoValue(value): { fieldConfig+: { defaults+: { noValue: value } } },
            withPath(value): { fieldConfig+: { defaults+: { path: value } } },
            withThresholds(value): { fieldConfig+: { defaults+: { thresholds: value } } },
            withThresholdsMixin(value): { fieldConfig+: { defaults+: { thresholds+: value } } },
            thresholds+: {
              withMode(value): { fieldConfig+: { defaults+: { thresholds+: { mode: value } } } },
              withSteps(value): { fieldConfig+: { defaults+: { thresholds+: { steps: if std.isArray(value) then value else [value] } } } },
              withStepsMixin(value): { fieldConfig+: { defaults+: { thresholds+: { steps+: if std.isArray(value) then value else [value] } } } },
              steps+: {
                withColor(value): { fieldConfig+: { defaults+: { thresholds+: { color: value } } } },
                withState(value): { fieldConfig+: { defaults+: { thresholds+: { state: value } } } },
                withValue(value): { fieldConfig+: { defaults+: { thresholds+: { value: value } } } },
              },
            },
            withUnit(value): { fieldConfig+: { defaults+: { unit: value } } },
            withWriteable(value=true): { fieldConfig+: { defaults+: { writeable: value } } },
          },
          withOverrides(value): { fieldConfig+: { overrides: if std.isArray(value) then value else [value] } },
          withOverridesMixin(value): { fieldConfig+: { overrides+: if std.isArray(value) then value else [value] } },
          overrides+: {
            withMatcher(value): { fieldConfig+: { matcher: value } },
            withMatcherMixin(value): { fieldConfig+: { matcher+: value } },
            matcher+: {
              withId(value=''): { fieldConfig+: { matcher+: { id: value } } },
              withOptions(value): { fieldConfig+: { matcher+: { options: value } } },
            },
            withProperties(value): { fieldConfig+: { properties: if std.isArray(value) then value else [value] } },
            withPropertiesMixin(value): { fieldConfig+: { properties+: if std.isArray(value) then value else [value] } },
            properties+: {
              withId(value=''): { fieldConfig+: { id: value } },
              withValue(value): { fieldConfig+: { value: value } },
            },
          },
        },
        withGridPos(value): { gridPos: value },
        withGridPosMixin(value): { gridPos+: value },
        gridPos+: {
          withH(value=9): { gridPos+: { h: value } },
          withStatic(value=true): { gridPos+: { static: value } },
          withW(value=12): { gridPos+: { w: value } },
          withX(value=0): { gridPos+: { x: value } },
          withY(value=0): { gridPos+: { y: value } },
        },
        withId(value): { id: value },
        withInterval(value): { interval: value },
        withLinks(value): { links: if std.isArray(value) then value else [value] },
        withLinksMixin(value): { links+: if std.isArray(value) then value else [value] },
        links+: {
          withAsDropdown(value=false): { asDropdown: value },
          withIcon(value): { icon: value },
          withIncludeVars(value=false): { includeVars: value },
          withKeepTime(value=false): { keepTime: value },
          withTags(value): { tags: if std.isArray(value) then value else [value] },
          withTagsMixin(value): { tags+: if std.isArray(value) then value else [value] },
          withTargetBlank(value=false): { targetBlank: value },
          withTitle(value): { title: value },
          withTooltip(value): { tooltip: value },
          withType(value): { type: value },
          withUrl(value): { url: value },
        },
        withMaxDataPoints(value): { maxDataPoints: value },
        withOptions(value): { options: value },
        withOptionsMixin(value): { options+: value },
        withPluginVersion(value): { pluginVersion: value },
        withRepeat(value): { repeat: value },
        withRepeatDirection(value='h'): { repeatDirection: value },
        withTags(value): { tags: if std.isArray(value) then value else [value] },
        withTagsMixin(value): { tags+: if std.isArray(value) then value else [value] },
        withTargets(value): { targets: if std.isArray(value) then value else [value] },
        withTargetsMixin(value): { targets+: if std.isArray(value) then value else [value] },
        withThresholds(value): { thresholds: if std.isArray(value) then value else [value] },
        withThresholdsMixin(value): { thresholds+: if std.isArray(value) then value else [value] },
        withTimeFrom(value): { timeFrom: value },
        withTimeRegions(value): { timeRegions: if std.isArray(value) then value else [value] },
        withTimeRegionsMixin(value): { timeRegions+: if std.isArray(value) then value else [value] },
        withTimeShift(value): { timeShift: value },
        withTitle(value): { title: value },
        withTransformations(value): { transformations: if std.isArray(value) then value else [value] },
        withTransformationsMixin(value): { transformations+: if std.isArray(value) then value else [value] },
        transformations+: {
          withId(value): { id: value },
          withOptions(value): { options: value },
          withOptionsMixin(value): { options+: value },
        },
        withTransparent(value=false): { transparent: value },
        withType(value): { type: value },
      },
      'dashboard.RowPanel'+: {
        withCollapsed(value=false): { collapsed: value },
        withDatasource(value): { datasource: value },
        withDatasourceMixin(value): { datasource+: value },
        datasource+: {
          withType(value): { datasource+: { type: value } },
          withUid(value): { datasource+: { uid: value } },
        },
        withGridPos(value): { gridPos: value },
        withGridPosMixin(value): { gridPos+: value },
        gridPos+: {
          withH(value=9): { gridPos+: { h: value } },
          withStatic(value=true): { gridPos+: { static: value } },
          withW(value=12): { gridPos+: { w: value } },
          withX(value=0): { gridPos+: { x: value } },
          withY(value=0): { gridPos+: { y: value } },
        },
        withId(value): { id: value },
        withPanels(value): { panels: if std.isArray(value) then value else [value] },
        withPanelsMixin(value): { panels+: if std.isArray(value) then value else [value] },
        withRepeat(value): { repeat: value },
        withTitle(value): { title: value },
        withType(value): { type: value },
      },
      'dashboard.GraphPanel'+: {
        withType(value): { type: value },
      },
      'dashboard.HeatmapPanel'+: {
        withType(value): { type: value },
      },
    },
    withRefresh(value): { refresh: value },
    withRefreshMixin(value): { refresh+: value },
    withSchemaVersion(value=36): { schemaVersion: value },
    withStyle(value='dark'): { style: value },
    withTags(value): { tags: if std.isArray(value) then value else [value] },
    withTagsMixin(value): { tags+: if std.isArray(value) then value else [value] },
    withTemplating(value): { templating: value },
    withTemplatingMixin(value): { templating+: value },
    templating+: {
      withList(value): { templating+: { list: if std.isArray(value) then value else [value] } },
      withListMixin(value): { templating+: { list+: if std.isArray(value) then value else [value] } },
      list+: {
        withLabel(value): { templating+: { label: value } },
        withName(value): { templating+: { name: value } },
        withType(value): { templating+: { type: value } },
      },
    },
    withTime(value): { time: value },
    withTimeMixin(value): { time+: value },
    time+: {
      withFrom(value='now-6h'): { time+: { from: value } },
      withTo(value='now'): { time+: { to: value } },
    },
    withTimepicker(value): { timepicker: value },
    withTimepickerMixin(value): { timepicker+: value },
    timepicker+: {
      withCollapse(value=false): { timepicker+: { collapse: value } },
      withEnable(value=true): { timepicker+: { enable: value } },
      withHidden(value=false): { timepicker+: { hidden: value } },
      withRefreshIntervals(value): { timepicker+: { refresh_intervals: if std.isArray(value) then value else [value] } },
      withRefreshIntervalsMixin(value): { timepicker+: { refresh_intervals+: if std.isArray(value) then value else [value] } },
      withTimeOptions(value): { timepicker+: { time_options: if std.isArray(value) then value else [value] } },
      withTimeOptionsMixin(value): { timepicker+: { time_options+: if std.isArray(value) then value else [value] } },
    },
    withTimezone(value='browser'): { timezone: value },
    withTitle(value): { title: value },
    withUid(value): { uid: value },
    withVersion(value): { version: value },
    withWeekStart(value): { weekStart: value },
  },
}
+ (import 'veneer.libsonnet')
